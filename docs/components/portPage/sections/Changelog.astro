---
import {
  CHANGELOG_COLLAPSE_THRESHOLD,
  CHANGELOG_NON_COLLAPSE_ITEMS,
} from "../../../constants.mjs";
import commitMap from "../../../virtual/commitMap.mjs";
import SectionWrapper from "../SectionWrapper.astro";
import ChangelogList from "../components/ChangelogList.astro";
import ChangelogListItem from "../components/ChangelogListItem.astro";
import { type SectionProps, defineSection } from "../defineSection.mjs";
import { pluralize } from "../utils/pluralize.mjs";

type Props = SectionProps;

export const getSection = defineSection({
  title: "Changelog",
});

const {
  context: { commits },
  section,
} = Astro.props;

const items = commits
  .slice()
  .reverse()
  .map((commit, index) => {
    const commitData = commitMap.get(commit);
    if (!commitData) {
      throw new Error(`Commit ${commit} not found in commitMap`);
    }
    const { message, committer } = commitData;
    return {
      commit,
      timestamp: committer[0],
      latest: index === 0,
      oldest: index === commits.length - 1,
      message,
    };
  });

const nonCollapsed =
  items.length > CHANGELOG_COLLAPSE_THRESHOLD
    ? items.slice(0, CHANGELOG_NON_COLLAPSE_ITEMS)
    : items;
const collapsed = items.slice(nonCollapsed.length);

const moreText = collapsed.length
  ? `and ${pluralize(collapsed.length, "more commit")}:`
  : undefined;
---

<SectionWrapper section={section}>
  <ChangelogList moreText={moreText}>
    {nonCollapsed.map((item) => <ChangelogListItem {...item} />)}

    <Fragment slot="more">
      {collapsed.map((item) => <ChangelogListItem {...item} />)}
    </Fragment>
  </ChangelogList>
</SectionWrapper>
