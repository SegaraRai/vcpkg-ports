---
interface Props {
  readonly class?: any;
  readonly lang: string;
  readonly nosnippet?: boolean | undefined;
}

const { class: classList, lang, nosnippet } = Astro.props;
---

<div
  class:list={[
    ":uno: relative !whitespace-normal overflow-hidden !p-0 bg-[#35312b] dark:bg-[#16130d] rounded-2 text-sm",
    `code-block language-${lang}`,
    classList || "",
  ]}
  data-nosnippet={nosnippet || undefined}
>
  <pre
    class=":uno: block max-h-80 overflow-auto px-5 py-3"
    tabindex="0"><code class=":uno: block w-full h-full" translate="no"><slot /></code></pre>
  <button
    class:list={[
      ":uno: absolute top-2 right-6 select-none transition-all-250 !text-gray-300/60 w-8 h-8 p-1 flex items-center justify-center hover:bg-white/17 rounded",
      "copy",
    ]}
    title="Copy Code"
  >
    <span
      class:list={[
        ":uno: opacity-0 block w-full h-full transition-opacity-250 relative",
        "icon",
      ]}
      data-mode="initial"
    >
      <span class:list={[":uno: i-mdi-clipboard-text-outline", "icon-initial"]}
      ></span>
      <span class:list={[":uno: i-mdi-clipboard-check-outline", "icon-copied"]}
      ></span>
      <span class:list={[":uno: i-mdi-clipboard-remove-outline", "icon-failed"]}
      ></span>
    </span>
    {
      lang !== "plaintext" && (
        <span
          class:list={[
            ":uno: block absolute top-0 right-1 pointer-events-none transition-opacity-250",
            "lang",
          ]}
          translate="no"
          set:text={lang}
        />
      )
    }
  </button>
</div>

<style is:global>
  div.code-block > code > .line {
    @apply block;
    @apply whitespace-pre;
  }

  div.code-block:hover > .copy > .lang,
  div.code-block > .copy:focus > .lang {
    @apply opacity-0;
  }

  div.code-block:hover > .copy > .icon,
  div.code-block > .copy:focus > .icon {
    @apply opacity-100;
  }

  div.code-block > .copy > .icon > * {
    @apply block;
    @apply w-full;
    @apply h-full;
    @apply opacity-0;
    @apply transition-opacity-250;
  }

  div.code-block > .copy > .icon > :not(.icon-initial) {
    @apply absolute;
    @apply top-0;
    @apply left-0;
  }

  div.code-block > .copy > .icon[data-mode="initial"] > .icon-initial,
  div.code-block > .copy > .icon[data-mode="copied"] > .icon-copied,
  div.code-block > .copy > .icon[data-mode="failed"] > .icon-failed {
    @apply opacity-100;
  }
</style>

<script>
  const ICON_TIMEOUT = 2000;

  const copyAsync = async (button: HTMLElement): Promise<boolean> => {
    if (!navigator?.clipboard) {
      return false;
    }
    const code = button.parentElement?.querySelector("code");
    if (!code) {
      return false;
    }
    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-text-content
      await navigator.clipboard.writeText(code.innerText.trim() + "\n");
    } catch {
      return false;
    }
    return true;
  };

  const handleCopy = (button: HTMLElement): void => {
    copyAsync(button).then((result): void => {
      const icon = button.querySelector<HTMLElement>(".icon");
      if (!icon) {
        return;
      }
      icon.dataset.mode = result ? "copied" : "failed";
      if ((icon as any)._timer != null) {
        clearTimeout((icon as any)._timer);
      }
      (icon as any)._timer = setTimeout((): void => {
        icon.dataset.mode = "initial";
      }, ICON_TIMEOUT);
    });
  };

  const copyButtons = document.querySelectorAll<HTMLButtonElement>(
    "div.code-block>button.copy"
  );
  for (const button of copyButtons) {
    button.addEventListener("click", (): void => handleCopy(button));
  }
</script>
